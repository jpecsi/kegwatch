definitions:
  types.Beer:
    properties:
      beer_id:
        type: string
      beer_name:
        type: string
      consumer:
        type: string
      oz_poured:
        type: number
      tap_id:
        type: integer
      time:
        type: string
    type: object
  types.Game:
    properties:
      date:
        type: string
      description:
        type: string
      id:
        type: string
      status:
        type: integer
    type: object
  types.Keg:
    properties:
      abv:
        type: number
      capacity:
        type: integer
      date_kicked:
        type: string
      date_tapped:
        type: string
      days_to_consume:
        type: integer
      id:
        type: string
      name:
        type: string
      remaining:
        type: number
      status:
        type: integer
      tap:
        type: integer
    type: object
  types.TeamAffiliation:
    properties:
      consumer:
        type: string
      game:
        type: string
      team:
        type: string
    type: object
  types.User:
    properties:
      body_cat:
        type: integer
      grams:
        type: integer
      id:
        type: string
      is_female:
        type: boolean
    type: object
  types.UserPass:
    properties:
      bac:
        type: number
      beer:
        type: string
      name:
        type: string
      oz:
        type: integer
    type: object
info:
  contact: {}
paths:
  /beer:
    post:
      consumes:
      - application/json
      description: Insert single beer to beer_log with POST body and no URL params
      parameters:
      - description: Beer to be recorded
        in: body
        name: beer
        required: true
        schema:
          $ref: '#/definitions/types.Beer'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create single record of pour from provided JSON
      tags:
      - beer
  /beer/{user}:
    put:
      consumes:
      - application/json
      description: Update single (last poured) beer to beer_log with PUT request (no
        body) and the consumer as a URL parameter
      parameters:
      - description: User to attribute the last pour to
        in: path
        name: user
        required: true
        type: string
      produces:
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create single record of pour from provided JSON
      tags:
      - beer
  /games:
    get:
      consumes:
      - application/json
      description: Get all games with single GET and no params
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Game'
            type: array
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get all games
      tags:
      - games
    post:
      consumes:
      - application/json
      description: Insert single Game with POST body and no URL params
      parameters:
      - description: Game to be recorded
        in: body
        name: game
        required: true
        schema:
          $ref: '#/definitions/types.Game'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create game from provided JSON
      tags:
      - games
  /games/edit:
    put:
      consumes:
      - application/json
      description: Overwrite single Game with PUT body and no URL params
      parameters:
      - description: Game to be replaced
        in: body
        name: game
        required: true
        schema:
          $ref: '#/definitions/types.Game'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Replace existing game with provided JSON
      tags:
      - games
  /kegs:
    get:
      consumes:
      - application/json
      description: Gets ACTIVE kegs stored in DB, represented in JSON format
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Keg'
            type: array
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get Active kegs
      tags:
      - kegs
    post:
      consumes:
      - application/json
      description: Creates a single keg as indicated by the JSON provided in the POST
        request body
      parameters:
      - description: The keg to be added to the database
        in: body
        name: keg
        required: true
        schema:
          $ref: '#/definitions/types.Keg'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create a keg
      tags:
      - kegs
  /kegs/all:
    get:
      consumes:
      - application/json
      description: Gets all kegs stored in DB, represented in JSON format
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.Keg'
            type: array
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get all kegs
      tags:
      - kegs
  /kegs/kick/{tapNo}:
    put:
      consumes:
      - application/json
      description: Updates a single keg as indicated by the JSON provided in the POST
        request body, giving it a 'date kicked' and 'days to consume'
      parameters:
      - description: The keg's tap number
        in: path
        name: tapNo
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Mark a keg as "kicked" or empty
      tags:
      - kegs
  /pass/user/{userId}:
    get:
      consumes:
      - application/json
      description: Gets pass of user with provided ID, returns current BAC from downstream
        BAC service and other associated user info
      parameters:
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.UserPass'
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get single user pass
      tags:
      - users
  /teams:
    get:
      consumes:
      - application/json
      description: Gets all teams stored in DB, represented in JSON format
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.TeamAffiliation'
            type: array
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get all teams
      tags:
      - teams
    post:
      consumes:
      - application/json
      description: Creates a single team as indicated by the JSON provided in the
        POST request body
      parameters:
      - description: Team to be recorded
        in: body
        name: team
        required: true
        schema:
          $ref: '#/definitions/types.TeamAffiliation'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
      summary: Create a team
      tags:
      - teams
  /users:
    get:
      consumes:
      - application/json
      description: Get all users with single GET and no params
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/types.User'
            type: array
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Insert single User with POST body and no URL params
      parameters:
      - description: User to be recorded
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/types.User'
      produces:
      - text/plain
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Create user from provided JSON
      tags:
      - users
swagger: "2.0"
