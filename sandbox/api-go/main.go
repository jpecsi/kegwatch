package main

import (
	"KegwatchApi/common_db"
	"KegwatchApi/common_log"
	"KegwatchApi/routes"
	"fmt"
	"os"

	_ "github.com/go-sql-driver/mysql"
	"github.com/sirupsen/logrus"

	_ "KegwatchApi/docs" // docs is generated by Swag CLI, you have to import it

	_ "github.com/swaggo/http-swagger" // http-swagger middleware
)

// @title Kegwatch REST API
// @version 1.0
// @description Handle Requests for the Sophisticated Management of Beer/Keg, User, Team, and Game States
// @termsOfService http://kegwatch.io/terms/

// @contact.name Kegwatch Genius, Lord of Kegs, First of His Name, etc.. whatever you wanna call me, that's fine
// @contact.url http://www.kegwatch.io/support
// @contact.email eli@kegwatch.io
func main() {
	common_log.LogrusStdout(logrus.TraceLevel)

	/* Get MySQL credentials from docker run -e env vars */
	scrapeSqlEnvs()

	/* Continue with real program logic */
	db, connectErr := common_db.OpenConnection()
	common_log.FailOnError(connectErr, "failed to open a connection to the db; shutting down..")
	defer db.Close()

	fmt.Println("Successfully connected!")

	routes.ServeHttp()
}

func scrapeSqlEnvs() {
	u := os.Getenv("USER")
	if u != "" {
		common_db.SetUser(u)
	}

	p := os.Getenv("PW")
	if p != "" {
		common_db.SetPw(p)
	}

	a := os.Getenv("ADDR")
	if a != "" {
		common_db.SetAddr(a)
	}

	d := os.Getenv("DB")
	if d != "" {
		common_db.SetDb(d)
	}
}
